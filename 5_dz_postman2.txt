HW_2 Postman


http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200
3. Проверить, что в body приходит правильный string.
-Create new collection - group_19_HW2
-Create new http request
	Method GET
	Type "http://162.55.220.72:5005/first" in the textbox	
	Click the button "SAVE", name "GET1_HW2_postman"
	Click the button "Send"
	Check statuse code - 200 OK
	Click the button "Save response" 
RESPONSE:
This is the first responce from server!



http://162.55.220.72:5005/user_info_3
1. Отправить запрос.

-Create new http request
-Method POST
-Type "http://162.55.220.72:5005/user_info_3" in the textbox
-Go to "Body"
-Type "name" into the field KEY in the first line
-Type "Polina" into the field VALUE in front the "name"
-Type "age" into the field KEY in the second line
-Type "30" into the field VALUE in front the "age"
-Type "salary" into the field KEY in the third line
-Type "1000" into the field VALUE in front the "salary"
-Click the button "Send"

2. Статус код 200
-Check statuse code - 200 OK

RESPONSE
{
    "age": "30",
    "family": {
        "children": [
            [
                "Alex",
                24
            ],
            [
                "Kate",
                12
            ]
        ],
        "u_salary_1_5_year": 4000
    },
    "name": "Polina",
    "salary": 1000
}

3. Спарсить response body в json.
-Go to Tests
-Type in the console- let resp_JSON = pm.response.json(); 

4. Проверить, что name в ответе равно name s request (name вбить руками.)

pm.test("Test_name", function () {
    let resp_JSON = pm.response.json();
    pm.expect(resp_JSON.name).to.eql("Polina");
});

5. Проверить, что age в ответе равно age s request (age вбить руками.)

pm.test("Age_test", function () {
    let resp_JSON = pm.response.json();
    pm.expect(Number(resp_JSON.age)).to.eql(33);
});
6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)

pm.test("Salary_test", function() {
    let resp_JSON = pm.response.json();
    pm.expect(resp_JSON.salary).to.eql(1000);
}
);
7. Спарсить request- let req_JSON = request.data;

8. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test ("Request_test_name", function(){
    let req_JSON = request.data;
    pm.expect(req_JSON.name).to.eql("Polina");
});

9. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test ("Request_test_age", function(){
    let req_JSON = request.data;
    pm.expect(+req_JSON.age).to.eql(30);
});
10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test ("Request_test_salary", function(){
    let req_JSON = request.data;
    pm.expect(+req_JSON.salary).to.eql(1000);
});

11. Вывести в консоль параметр family из response.
let resp_family = pm.response.json();
console.log(resp_family.family);



12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
pm.test ("Test_1.5ySalary", function(){
    let req_JSON = request.data;
    console.log(req_JSON);
    pm.expect(+req_JSON.salary*4).to.eql(resp_JSON.family.u_salary_1_5_year);
});



http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
let respJSON = pm.response.json();

4. Спарсить request.
let params = pm.request.url.getQueryString();
let query = {};
pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});

5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("name_REQ=name_RESP", function(){
    pm.expect(respJSON.name).to.equal(query.name);
});

6. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("age_REQ=age_RESP", function(){
    pm.expect(respJSON.age).to.equal(query.age);
});
7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("salary_REQ=salary_RESP", function(){
    pm.expect(respJSON.salary).to.equal(+query.salary);
});
8. Вывести в консоль параметр family из response.
console.log(respJSON.family);

9. Проверить, что у параметра dog есть параметры name.
pm.test("Dog_has_a_name", function () {
    let family = pm.response.json().family;
    let dog = family.pets.dog;
    pm.expect(dog.hasOwnProperty('name')).to.eql(true);});

10. Проверить, что у параметра dog есть параметры age.
pm.test("Dog_has_an_age", function () {
    let family = pm.response.json().family;
    let dog = family.pets.dog;
    pm.expect(dog.hasOwnProperty('age')).to.eql(true);});

11. Проверить, что параметр name имеет значение Luky.
pm.test("Dog_Luky", function(){
    pm.expect(dog.name).to.equal("Luky");});

12. Проверить, что параметр age имеет значение 4.
pm.test("Dog_age_4", function(){
    pm.expect(dog.age).to.equal(4);
});

http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
let respJSON = pm.response.json();
console.log(respJSON);

4. Спарсить request.
let params = pm.request.url.getQueryString();
let query = {};
pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});
console.log(params);
console.log(query);

5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test('name_resp=name_req', function(){
    pm.expect(respJSON.name).to.equal(query.name);
});

6. Проверить, что age в ответе равно age из request (age забрать из request.)
pm.test('age_resp=age_req', function(){
    pm.expect(respJSON.age).to.equal(+query.age);
});

7. Вывести в консоль параметр salary из request.
console.log(query.salary);

8. Вывести в консоль параметр salary из response.
console.log(respJSON.salary);

9. Вывести в консоль 0-й элемент параметра salary из response.
console.log(respJSON.salary[0]);

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log(respJSON.salary[1]);

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log(respJSON.salary[2]);

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test('salary[0]_resp=salary_req', function(){
    pm.expect(respJSON.salary[0]).to.equal(+query.salary);
});

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test('salary[1]_resp=salary*2_req', function(){
    pm.expect(+respJSON.salary[1]).to.equal(+query.salary*2);
});

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test('salary[2]_resp=salary*3_req', function(){
    pm.expect(+respJSON.salary[2]).to.equal(+query.salary*3);
});

15. Создать в окружении переменную name
-Go to environment
-Click on the button "New"
-Type "name" in the field VARIABLE
-Type "Polina" in the field CURRENT VALUE
-Click "Save", name the new environment 'GROUP_19' 

16. Создать в окружении переменную age
-Go to environment
-Go to environment named GROUP_19
-Type "age" in the field VARIABLE
-Type "30" in the field CURRENT VALUE
-Click "Save"

17. Создать в окружении переменную salary
-Go to environment
-Go to environment named GROUP_19
-Type "age" in the field VARIABLE
-Type "30" in the field CURRENT VALUE
-Click "Save"

18. Передать в окружение переменную name
pm.environment.set("name", "Polina");

19. Передать в окружение переменную age
pm.environment.set("age", "30");

20. Передать в окружение переменную salary
pm.environment.set("salary", 1000);

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
let salary = pm.response.json().salary;
salary.forEach((el, i) => console.log(el, i));



http://162.55.220.72:5005/user_info_2

1. Вставить параметр salary из окружения в request
-Go to Body
-Choose radio-button "form-data"
-Type "salary" in the field KEY in the first line
-Type {{salary}} in the field VALUE in front of the line "salary"

2. Вставить параметр age из окружения в age
-Type "age" in the field KEY in the second line
-Type {{age}} in the field VALUE in front of the line "age"

3. Вставить параметр name из окружения в name
-Type "name" in the field KEY in the third line
-Type {{name}} in the field VALUE in front of the line "name"

4. Отправить запрос. -  Click the botton "SAVE", click the botton "Send"

5. Статус код 200 - Check that status code is 200

6. Спарсить response body в json.
let respJSON = pm.response.json();
console.log(respJSON);

7. Спарсить request.
let req_JSON = request.data;
console.log(req_JSON);

8. Проверить, что json response имеет параметр start_qa_salary
pm.test("Test_RESP_has_start_qa_salary", function () {
    pm.expect(respJSON.hasOwnProperty('start_qa_salary')).to.eql(true);});

9. Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("Test_RESP_has_qa_salary_after_6_months", function(){
    pm.expect(respJSON.hasOwnProperty('qa_salary_after_6_months')).to.eql(true);
});

10. Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test('Test_RESP_has_qa_salary_after_12_months', function(){
    pm.expect(respJSON.hasOwnProperty('qa_salary_after_12_months')).to.eql(true);
});

11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test('Test_RESP_has_qa_salary_after_1.5_year', function(){
    pm.expect(respJSON.hasOwnProperty('qa_salary_after_1.5_year')).to.eql(true);
});

12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test('Test_RESP_has_qa_salary_after_3.5_years', function(){
    pm.expect(respJSON.hasOwnProperty('qa_salary_after_3.5_years')).to.eql(true);
    });

13. Проверить, что json response имеет параметр person
pm.test('Test_RESP_has_person', function(){
    pm.expect(respJSON.hasOwnProperty("person")).to.eql(true);
});

14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
pm.test('Test_RESP_start_qa_salary=REQ_salary', function(){
    pm.expect(respJSON.start_qa_salary).to.eql(+req_JSON.salary);
});

15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test('Test_RESP_qa_salary_after_6_months=REQ_salary*2', function(){
    pm.expect(respJSON.qa_salary_after_6_months).to.eql(+req_JSON.salary*2);
});

16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test('Test_RESP_qa_salary_after_12_months=REQ_salary*2.7', function(){
    pm.expect(respJSON.qa_salary_after_12_months).to.eql(+req_JSON.salary*2.7);
});

17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
pm.test('Test_RESP_qa_salary_after_1.5_year=REQ_salary*3.3', function(){
    pm.expect(respJSON['qa_salary_after_1.5_year']).to.eql(+req_JSON.salary*3.3);
});

18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
pm.test('Test_RESP_qa_salary_after_3.5_years=REQ_salary*3.8', function(){
    pm.expect(respJSON['qa_salary_after_3.5_years']).to.eql(+req_JSON.salary*3.8);
});

19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
pm.test('Test_RESP_u_name[1]=REQ_salary', function(){
    pm.expect(respJSON.person.u_name[1]).to.eql(+req_JSON.salary);
});

20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test('Test_RESP_u_age=REQ_age', function(){
    pm.expect(respJSON.person.u_age).to.eql(+req_JSON.age);
});

21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
 pm.test('RESP_u_salary_5_years = REQ_salary*4.2', function(){
     pm.expect(respJSON.person.u_salary_5_years).to.eql(+req_JSON.salary*4.2);
 });


22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
let person = pm.response.json().person;
for (const property in person) {
  console.log(`${property}: ${person[property]}`);
}